#!/usr/bin/env python3
# ----------------------------------------------------------------------
''' SuperSimple (and useless) unicodeLanguage. Numbers are roman numerals.
push 1 to stack, push 2 to stack, add them, print top of stack:
I⇑⍽II⇑⍽⊕⍽ψ⍽↵  
push 1 to stack, push 11 to stack, swap 1. and 2. item in stack, minus, print:
I⇑⍽XI⇑⍽↔⍽⊖⍽ψ⍽↵
'''
# ----------------------------------------------------------------------
from ply import yacc
import calc_lex # previous phase example snippet code

# tokens are defined in lex-module, but needed here also in syntax rules
tokens = calc_lex.tokens

# any funcion starting with 'p_' is PLY yacc rule
# first definition is the target we want to reduce
# in other words: after processing all input tokens, if this start-symbol
# is the only one left, we do not have any syntax errors
def p_program(p):
    '''program : statement
               | program statement'''
    print( 'program' )


# statement can be applied to number or standalone
def p_statement(p):
    '''statement : ROMAN unary_op
                 | single_op'''
    if len(p) == 3:
        print( 'statement with ROMAN(', p[1], ')' )
    else:
        print( 'statement' )

def p_unary_op(p):
    '''unary_op : PUSH'''
    print( 'unary_op(', p[1], ')' )

def p_single_op(p):
    '''single_op : POP
                 | SWAP
                 | ADD
                 | SUB
                 | PRINT'''
    print( 'single_op(', p[1], ')' )

# error token is generated by PLY if the automation enters error state
# (cannot continue reducing or shifting)
def p_error(p):
    print( 'syntax error @', p )
    raise SystemExit

parser = yacc.yacc()

if __name__ == '__main__':
    import argparse, codecs
    arg_parser = argparse.ArgumentParser()
    group = arg_parser.add_mutually_exclusive_group()
    group.add_argument('--who', action='store_true', help='who wrote this' )
    group.add_argument('-f', '--file', help='filename to process')
    ns = arg_parser.parse_args()
    if ns.who == True:
        # identify who wrote this
        print( '85471 Jyke Savia' )
        print( '88888 Ahto Simakuutio' )
    elif ns.file is None:
        # user didn't provide input filename
        arg_parser.print_help()
    else:
        data = codecs.open( ns.file, encoding='utf-8' ).read()
        result = parser.parse(data, lexer=calc_lex.lexer, debug=False)
        if result is None:
            print( 'syntax OK' )

